<?php
namespace{
error_reporting(5);
class Packager_Php_Wrapper{/** @var string */const FS_MODE='PHP_STRICT_PACKAGE';/** @var string */public static$BasePath;/** @var int */public static$BasePathLength;/** @var mixed */public static$Context=NULL;/** @var array */public static$NewContextContents=[];/** @var array */public static$Contents=[];/** @var array */public static$Info=[
'/vendor/mvccore/mvccore/src/MvcCore/Tool.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>3756,'lines'=>[1,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Route.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>4978,'lines'=>[2,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Response.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>4746,'lines'=>[3,1]],
'/App/Bootstrap.php'=>['index'=>-1,'mtime'=>1503767592,'size'=>947,'lines'=>[4,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Session.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>6557,'lines'=>[5,1]],
'/App/Views/Helpers/Chars.php'=>['index'=>-1,'mtime'=>1503768335,'size'=>151,'lines'=>[6,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Debug.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>11219,'lines'=>[7,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Config.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>11422,'lines'=>[8,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Router.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>14764,'lines'=>[9,1]],
'/vendor/mvccore/mvccore/src/MvcCore.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>32215,'lines'=>[11,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Request.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>13891,'lines'=>[13,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Model.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>14571,'lines'=>[14,1]],
'/vendor/mvccore/ext-request-cli/src/MvcCore/Ext/Request/Cli.php'=>['index'=>-1,'mtime'=>1507400837,'size'=>7050,'lines'=>[15,1]],
'/vendor/mvccore/mvccore/src/MvcCore/View.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>11149,'lines'=>[16,1]],
'/vendor/mvccore/mvccore/src/MvcCore/Controller.php'=>['index'=>-1,'mtime'=>1507400835,'size'=>11519,'lines'=>[17,1]],
'/App/Controllers/Base.php'=>['index'=>-1,'mtime'=>1503767697,'size'=>204,'lines'=>[18,1]],
'/App/Controllers/Index.php'=>['index'=>-1,'mtime'=>1507401105,'size'=>804,'lines'=>[19,1]],
'/App/Controllers/Import.php'=>['index'=>-1,'mtime'=>1503769413,'size'=>276,'lines'=>[20,1]],
'/index.php'=>['index'=>-1,'mtime'=>1507401570,'size'=>131,'lines'=>[22,1]],
'/App/config.ini'=>['index'=>0,'mtime'=>1507401615,'size'=>39,'store'=>'text'],
'/App/Views/Layouts/layout.phtml'=>['index'=>1,'mtime'=>1503768400,'size'=>404,'store'=>'template'],
'/App/Views/Scripts/index/index.phtml'=>['index'=>2,'mtime'=>1503769214,'size'=>176,'store'=>'template'],
'/App/Views/Scripts/index/not-found.phtml'=>['index'=>3,'mtime'=>1507038120,'size'=>113,'store'=>'template'],
'/vendor/mvccore/mvccore/src/MvcCore/debug.html'=>['index'=>4,'mtime'=>1507400835,'size'=>1514,'store'=>'text'],
];/** @var int */private static$_baseLinesCount=69;/** @var bool */private static$_minifiedPhp=TRUE;/** @var array */private static$_contexts=[];/** @var bool */private static$_closureRendering=TRUE;/** @var array */private static$_currentFileSource=[];public static function PrintBacktrace(){echo '<pre>';var_dump(debug_backtrace());echo '</pre>';}public static function Init(){self::$BasePath=str_replace('\\','/',__DIR__);self::$BasePathLength=mb_strlen(self::$BasePath);if(version_compare(PHP_VERSION,'5.4.0',"<")){self::$_closureRendering=FALSE;}}private static function _includeFile($path,&$context,$onceOnly,$fn=''){$path=self::NormalizePath($path);if($onceOnly&&self::_getIsFileIncluded($path))return;if(!isset(self::$Info[$path])){self::Warning('',$path,$fn);return FALSE;}else{return self::_includeFileWithRendering($path,$context,$onceOnly);}}private static function _getIsFileIncluded($path){return(isset(self::$Info[$path])&&self::$Info[$path]['included'])?TRUE:FALSE;}private static function _includeFileWithRendering($path,&$context,$onceOnly){$store=self::$Info[$path]['store'];$closureRendering=$store=='template'&&self::$_closureRendering;$result=self::_renderFile($path,$context,$onceOnly,$closureRendering,$store);if($closureRendering){return$result;}else{echo $result;return 1;}}private static function _renderFile($path,&$context,$onceOnly,$closureRendering,$store){if($closureRendering){$result=self::_callTemplateClosure($path,$context);}else{$result=self::_evalFile($path,$context,$store);}if($onceOnly)self::_setFileIsIncluded($path);return$result;}private static function _callTemplateClosure($path,&$context){$templateClosure=self::_getFileContent($path,FALSE);if(!is_null($context)){$templateClosure=$templateClosure->bindTo($context,$context);}return$templateClosure();}private static function _evalFile($path,&$context,$store){if($store=='template'){$content=&self::_getStaticWithContext($path,$context,$store);}else{$content=self::_getFileContent($path,TRUE);}self::_addContext($context);ob_start();try{eval(' ?'.'>'.$content.'<'.'?php ');}catch(Exception$e){throw$e;}self::_removeContext();return trim(ob_get_clean());}private static function _getStaticWithContext($path,$context){if(is_null($context)){$templateClosure=self::_getFileContent($path,TRUE);$content=self::_getTemplateClosureBody($templateClosure);}else{$content=&self::_getStaticWithContextAlreadyProcessed($path);if(mb_strlen($content)===0){$templateClosure=self::_getFileContent($path,TRUE);$content=self::_getTemplateClosureBody($templateClosure);$content=preg_replace("#([^\\\])(\\\$this)([^a-zA-Z0-9_\x7f-\xff])#im","$1".__CLASS__."::\$Context$3",$content);$index=self::$Info[$path]['index'];self::$NewContextContents[$index]=$content;}}return$content;}private static function _getTemplateClosureBody(Closure$templateClosure){$reflection=new ReflectionFunction($templateClosure);$startLine=$reflection->getStartLine()-1;$endLine=$reflection->getEndLine();$length=$endLine-$startLine;self::_setUpCurrentFileSource();$functionSource=implode('',array_slice(self::$_currentFileSource,$startLine,$length));$firstCloseTagPos=mb_strpos($functionSource,'?>')+2;$lastOpenTagPos=mb_strrpos($functionSource,'<?php');$functionBodyLength=$lastOpenTagPos-$firstCloseTagPos;$functionSource=mb_substr($functionSource,$firstCloseTagPos,$functionBodyLength);return$functionSource;}private static function _setUpCurrentFileSource(){if(count(self::$_currentFileSource)===0){self::$_currentFileSource=file(__FILE__);}}private static function _getStaticWithContextAlreadyProcessed($path){$content='';if(isset(self::$Info[$path])){$index=self::$Info[$path]['index'];if(isset(self::$NewContextContents[$index])){$content=&self::$NewContextContents[$index];}}return$content;}private static function _addContext($context){self::$_contexts[]=$context;self::$Context=$context;}private static function _removeContext(){$contextsCount=count(self::$_contexts);$newContext=NULL;if($contextsCount>0){$contextsCount-=1;unset(self::$_contexts[$contextsCount]);self::$_contexts=array_values(self::$_contexts);if($contextsCount>0){$newContext=self::$_contexts[$contextsCount-1];}}self::$Context=$newContext;}private static function _setFileIsIncluded($path){if(isset(self::$Info[$path])){self::$Info[$path]['included']=1;}else{self::$Info[$path]=['included'=>1];}}private static function _getFileContent($path,$decodeGzip=TRUE){if(!isset(self::$Info[$path]))return FALSE;$record=self::$Info[$path];$index=$record['index'];if($index==-1){return self::_getScript($record['lines']);}else{return self::_getStatic($record['store'],$index,$decodeGzip);}}private static function _getScript($lines){self::_setUpCurrentFileSource();$begin=self::$_baseLinesCount+$lines[0]-1;$end=$begin+$lines[1];$r="<?php\n";$g=self::$_minifiedPhp?"\n":"";for($i=$begin,$l=$end;$i<$l;$i+=1){$r.=$g.self::$_currentFileSource[$i];}$r.="\n?>";return$r;}private static function _getStatic($store,$index,$decodeGzip=TRUE){if($store=='template'){return self::$Contents[$index];}else if($store=='gzip'){return$decodeGzip?gzdecode(self::$Contents[$index]):self::$Contents[$index];}else if($store=='base64'){return base64_decode(self::$Contents[$index]);}else{return self::$Contents[$index];}}public static function NormalizePath($path){$path=str_replace('\\','/',$path);if(mb_strpos($path,'/./')!==FALSE){$path=str_replace('/./','/',$path);}if(mb_strpos($path,'/..')!==FALSE){while(true){$doubleDotPos=mb_strpos($path,"/..");if($doubleDotPos===FALSE){break;}else{$path1=mb_substr($path,0,$doubleDotPos);$path2=mb_substr($path,$doubleDotPos+3);$lastSlashPos=mb_strrpos($path1,'/');$path1=mb_substr($path1,0,$lastSlashPos);$path=$path1.$path2;}}}if(mb_strpos($path,self::$BasePath)===0){$path=mb_substr($path,self::$BasePathLength);}return str_replace('//','/',$path);}public static function _isProtocolPath($path){return preg_match("#^([a-z]*)\://(.*)#",$path)?TRUE:FALSE;}public static function Warning($msg='',$path='',$fn=''){if(!$msg)$msg="$fn($path): failed to open stream: No such file or directory";trigger_error($msg,E_USER_WARNING);}public static function Readfile($filename,$use_include_path=FALSE,$context=NULL){if(self::_isProtocolPath($filename))return call_user_func_array('readfile',func_get_args());$path=self::NormalizePath($filename);$content=self::_getFileContent($path,FALSE);if($content===FALSE){self::Warning('',$filename,'readfile');return FALSE;}else{return self::_readfile($content,$path);}}private static function _readfile(&$content,$path){$store=self::$Info[$path]['store'];if($store=='gzip'){if(strpos($_SERVER['HTTP_ACCEPT_ENCODING'],'gzip')!==FALSE){header('Content-Encoding: gzip');}else{$content=gzdecode($content);}}echo $content;return self::$Info[$path]['size'];}public static function IsDir($filename){$path=self::NormalizePath($filename);$catched=FALSE;foreach(self::$Info as$pathKey=>&$item){if(strpos($pathKey,$path)===0){$catched=TRUE;break;}}return$catched;}public static function FileGetContents($filename,$use_include_path=FALSE,$context=NULL,$offset=0){if(self::_isProtocolPath($filename))return call_user_func_array('file_get_contents',func_get_args());$path=self::NormalizePath($filename);$content=self::_getFileContent($path,TRUE);if($content===FALSE){self::Warning('',$filename,'file_get_contents');return FALSE;}else{return$content;}}public static function ParseIniFile($filename,$process_sections=FALSE,$scanner_mode=INI_SCANNER_NORMAL){$path=self::NormalizePath($filename);$content=self::_getFileContent($path,TRUE);if($content===FALSE){self::Warning('',$filename,'parse_ini_file');return FALSE;}else{return parse_ini_string($content,$process_sections,$scanner_mode);}}public static function FileExists($filename){$path=self::NormalizePath($filename);return isset(self::$Info[$path]);}public static function Filemtime($filename){$path=self::NormalizePath($filename);if(!isset(self::$Info[$path])){self::Warning("filemtime(): stat failed for $filename");return FALSE;}else{return self::$Info[$path]['mtime'];}}public static function IncludeStandard($path,$context=NULL){return self::_includeFile($path,$context,FALSE,'include');}}Packager_Php_Wrapper::Init();
\Packager_Php_Wrapper::$Contents[0]=<<<'PACKAGER_TEXT'
[environments]
development = 127.0.0.1
PACKAGER_TEXT;
\Packager_Php_Wrapper::$Contents[1]=function(){ ?>
<?php /** @var $this \MvcCore\View */?>
<?php echo $this->Chars(70,'=');?>

|<?php echo $this->Chars(68);?>|
|<?php
$spacesLength=68-strlen($this->Title);echo $this->Chars(floor($spacesLength/2));echo $this->Title;echo $this->Chars(ceil($spacesLength/2));?>|
|<?php echo $this->Chars(68);?>|
<?php echo $this->Chars(70,'=');?>


<?php echo $this->GetContent();?>
<?php return 1;};
\Packager_Php_Wrapper::$Contents[2]=function(){ ?>
<?php
/** @var $this \MvcCore\View */?>

	Choose option and press ENTER:

		[<?php echo $this->ImportKey;?>] to run import
		[<?php echo $this->QuitKey;?>] to exit
<?php return 1;};
\Packager_Php_Wrapper::$Contents[3]=function(){ ?>
<?php /** @var $this \MvcCore\View */?>
Oooops!

<?php echo $this->Title;?>

<?php echo $this->Message;?>
<?php return 1;};
\Packager_Php_Wrapper::$Contents[4]=<<<'PACKAGER_TEXT'
<div id="mvccore-dumps"><div id="mvccore-dumps-items">%mvccoreDumps%</div><input id="mvccore-dumps-btn" type="button" value="Dumps(%mvccoreDumpsCount%)" /></div>
<style>#mvccore-dumps{display:table;position:fixed;bottom:0;right:0;z-index:999999;margin:10px;overflow:auto;background:#e8e8e8;box-shadow:0 0 10px rgba(0,0,0,0.5);border-radius:5px;opacity:0;}#mvccore-dumps *{font-family:consolas,courier !important;}#mvccore-dumps-items .item{background:#fff;margin:5px 5px 0 5px;border-radius:3px;white-space:pre-wrap;}#mvccore-dumps-items .title{background:#888;color:#fff;font-weight:bold;padding:5px;margin:0;}#mvccore-dumps-items .value{padding:10px;overflow:auto;}#mvccore-dumps-items .value pre{margin:0;}#mvccore-dumps-items .value small.file{display:block;font-size:10px;color:#888;}#mvccore-dumps input{font-weight:bold;float:right;margin:5px;padding:2px 7px 2px 10px;}</style>
<script>(function(){var a=/MSIE [5-8]/g.test(navigator.userAgent),i="getElementById",j="style",o="height",y="width",r="block",s="auto",t="display",x="px",v=20,b=document,c=window,d=b[i]("mvccore-dumps"),e=b[i]("mvccore-dumps-items"),f=b[i]("mvccore-dumps-btn"),g=a?"attachEvent":"addEventListener",h=d[j],k=e[j],m=d.offsetHeight,w=d.offsetWidth,n=!0;function p(){if(n){var l=c.innerHeight-v,u=c.innerWidth-v;h.overflow=l>m&&u<w?"hidden":s;h[o]=Math.min(l,m)+x;h[y]=Math.min(u,w)+x}}function q(){n?(k[t]="none",h[o]=s,h[y]=s):k[t]=r;n=!n;p()}h[t]=r;c[g]("resize",p);f[g]("click",q);p();%mvccoreDumpsClose%h.opacity=1})();</script>
PACKAGER_TEXT;
}
namespace MvcCore{class Tool{public static function GetDashedFromPascalCase($pascalCase=''){return strtolower(preg_replace("#([a-z])([A-Z])#","$1-$2",lcfirst($pascalCase)));}public static function GetPascalCaseFromDashed($dashed=''){$a=explode('/',$dashed);foreach($a as&$b)$b=ucfirst(str_replace('-','',ucwords($b,'-')));return implode('/',$a);}public static function GetUnderscoredFromPascalCase($pascalCase=''){return strtolower(preg_replace("#([a-z])([A-Z])#","$1_$2",lcfirst($pascalCase)));}public static function GetPascalCaseFromUnderscored($underscored=''){$a=explode('/',$underscored);foreach($a as&$b)$b=ucfirst(str_replace('_','',ucwords($b,'_')));return implode('/',$a);}public static function EncodeJson($data){$flags=JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_HEX_AMP|(defined('JSON_UNESCAPED_SLASHES')?JSON_UNESCAPED_SLASHES:0)|(defined('JSON_UNESCAPED_UNICODE')?JSON_UNESCAPED_UNICODE:0)|(defined('JSON_PRESERVE_ZERO_FRACTION')?JSON_PRESERVE_ZERO_FRACTION:0);$json=json_encode($data,$flags);if($errorCode=json_last_error()){throw new\Exception(json_last_error_msg(),$errorCode);}if(PHP_VERSION_ID<70100){$json=strtr($json,["\xe2\x80\xa8"=>'\u2028',"\xe2\x80\xa9"=>'\u2029',]);}return$json;}public static function DecodeJson(&$jsonStr){$result=(object)['success'=>TRUE,'data'=>null,'errorData'=>[],];$jsonData=@json_decode($jsonStr);$errorCode=json_last_error();if($errorCode==JSON_ERROR_NONE){$result->data=$jsonData;}else{$result->success=FALSE;$result->errorData=[json_last_error_msg(),$errorCode];}return$result;}}}
namespace MvcCore{class Route{/** @var string */public$Name='';/** @var string */public$Controller='';/** @var string */public$Action='';/** @var string */public$Pattern='';/** @var string */public$Reverse='';/** @var array */public$Params=[];public static function GetInstance($object){if(gettype($object)=='array'){return new static($object);}else{return new static((array)$object);}}public function __construct($nameOrConfig=NULL,$controller=NULL,$action=NULL,$pattern=NULL,$reverse=NULL,$params=[]){$args=func_get_args();if(count($args)==1&&gettype($args[0])=='array'){$data=(object)$args[0];$name=isset($data->name)?$data->name:'';$controller=isset($data->controller)?$data->controller:'';$action=isset($data->action)?$data->action:'';$pattern=isset($data->pattern)?$data->pattern:'';$reverse=isset($data->reverse)?$data->reverse:'';$params=isset($data->params)?$data->params:[];}else{list($name,$controller,$action,$pattern,$reverse,$params)=$args;}if(!$controller&&!$action&&strpos($name,':')!==FALSE){list($controller,$action)=explode(':',$name);}$this->Name=$name;$this->Controller=$controller;$this->Action=$action;$this->Pattern=$pattern;$this->Reverse=$reverse?$reverse:trim($pattern,'#^$');$this->Params=$params;}public function SetName($name){$this->Name=$name;return$this;}public function SetController($controller){$this->Controller=$controller;return$this;}public function SetAction($action){$this->Action=$action;return$this;}public function SetPattern($pattern){$this->Pattern=$pattern;return$this;}public function SetReverse($reverse){$this->Reverse=$reverse;return$this;}public function SetParams($params=[]){$this->Params=$params;return$this;}}}
namespace MvcCore{class Response{const OK=200;const MOVED_PERMANENTLY=301;const SEE_OTHER=303;const NOT_FOUND=404;const INTERNAL_SERVER_ERROR=500;public static$CodeMessages=[self::OK=>'OK',self::MOVED_PERMANENTLY=>'Moved Permanently',self::SEE_OTHER=>'See Other',self::NOT_FOUND=>'Not Found',self::INTERNAL_SERVER_ERROR=>'Internal Server Error',];/** @var int */public$Code=self::OK;/** @var array */public$Headers=[];/** @var string */public$Body='';public static function GetInstance($code=self::OK,$headers=[],$body=''){$responseClass=\MvcCore::GetInstance()->GetResponseClass();return new$responseClass($code,$headers,$body);}public function __construct($code=self::OK,$headers=[],$body=''){$this->Code=$code;$this->Headers=$headers;$this->Body=$body;}public function SetCode($code){$this->Code=$code;return$this;}public function SetHeader($name,$value){header($name.": ".$value);$this->Headers[$name]=$value;return$this;}public function SetBody($body){$this->Body=&$body;return$this;}public function PrependBody($body){$this->Body=$body.$this->Body;return$this;}public function AppendBody($body){$this->Body.=$body;return$this;}public function UpdateHeaders(){$rawHeaders=headers_list();$name='';$value='';foreach($rawHeaders as$rawHeader){$doubleDotPos=strpos($rawHeader,':');if($doubleDotPos!==FALSE){$name=trim(substr($rawHeader,0,$doubleDotPos));$value=trim(substr($rawHeader,$doubleDotPos+1));}else{$name=$rawHeader;$value='';}$this->Headers[$name]=$value;}}public function IsRedirect(){return isset($this->Headers['Location']);}public function IsHtmlOutput(){if(isset($this->Headers['Content-Type'])){$value=$this->Headers['Content-Type'];return strpos($value,'text/html')!==FALSE||strpos($value,'application/xhtml+xml')!==FALSE;}return FALSE;}public function Send(){if(!headers_sent()){$code=$this->Code;$status=isset(static::$CodeMessages[$code])?' '.static::$CodeMessages[$code]:'';header("HTTP/1.0 $code $status");foreach($this->Headers as$name=>$value){header($name.": ".$value);}$this->addTimeAndMemoryHeader();}echo $this->Body;}protected function addTimeAndMemoryHeader(){$mtBegin=\MvcCore::GetInstance()->GetMicrotime();$time=number_format((microtime(TRUE)-$mtBegin)*1000,1,'.',' ');$ram=function_exists('memory_get_peak_usage')?number_format(memory_get_peak_usage()/1000000,2,'.',' '):'n/a';header("X-MvcCore-Cpu-Ram: $time ms, $ram MB");}}}
namespace App{class Bootstrap{public static function Init(){\MvcCore::GetInstance()->SetRequestClass(\MvcCore\Ext\Request\Cli::class);\MvcCore\Router::GetInstance(['Index:Index'=>['pattern'=>"#^/$#",'reverse'=>'/',],'CdCollection:Index'=>['pattern'=>"#^/albums$#",'reverse'=>'/albums',],'CdCollection:Create'=>['pattern'=>"#^/create#",'reverse'=>'/create',],'CdCollection:Edit'=>['pattern'=>"#^/edit/([0-9]*)#",'reverse'=>'/edit/{%id}','params'=>['id'=>0,],],]);}}}
namespace MvcCore{class Session extends\ArrayObject{/** @var string */const SESSION_METADATA_KEY='__MC';/** @var string */protected$__name='default';/** @var bool */protected static$started=FALSE;/** @var array|\stdClass */protected static$meta=[];/** @var array */protected static$instances=[];public static function Start(){if(static::$started)return;if(!\MvcCore::GetInstance()->GetRequest()->IsAppRequest())return;$sessionNotStarted=function_exists('session_status')?session_status()==PHP_SESSION_NONE:session_id()=='';if($sessionNotStarted){session_start();static::setUpMeta();static::setUpData();}static::$started=TRUE;}protected static function setUpMeta(){$metaKey=static::SESSION_METADATA_KEY;$meta=[];if(isset($_SESSION[$metaKey])){$meta=@unserialize($_SESSION[$metaKey]);}if(!$meta){$meta=['names'=>[],'hoops'=>[],'expirations'=>[],];}static::$meta=(object)$meta;}protected static function setUpData(){$hoops=&static::$meta->hoops;$names=&static::$meta->names;$expirations=&static::$meta->expirations;foreach($hoops as$name=>$hoop){$hoops[$name]-=1;}$now=time();foreach($names as$name=>$one){$unset=[];if(isset($hoops[$name])){if($hoops[$name]<0)$unset[]='hoops';}if(isset($expirations[$name])){if($expirations[$name]<$now)$unset[]='expirations';}if($unset){$currentErrRepLevels=error_reporting();error_reporting(0);foreach($unset as$unsetKey){if(isset(static::$meta->$unsetKey)&&isset(static::$meta->$unsetKey[$name]))unset(static::$meta->$unsetKey[$name]);}error_reporting($currentErrRepLevels);unset($names[$name]);unset($_SESSION[$name]);}}}public static function Close(){register_shutdown_function(function(){foreach(static::$instances as&$instance){if(count($instance)===0)$instance->Destroy();}$metaKey=static::SESSION_METADATA_KEY;$_SESSION[$metaKey]=serialize(static::$meta);@session_write_close();});}public static function&GetNamespace($name='default'){if(!isset(static::$instances[$name])){static::$instances[$name]=new static($name);}return static::$instances[$name];}public function __construct($name='default'){if(!static::$started)static::Start();$this->__name=$name;static::$meta->names[$name]=1;if(!isset($_SESSION[$name]))$_SESSION[$name]=[];static::$instances[$name]=$this;}public function SetExpirationHoops($hoops){static::$meta->hoops[$this->__name]=$hoops;return$this;}public function SetExpirationSeconds($seconds){static::$meta->expirations[$this->__name]=time()+$seconds;return$this;}public function Destroy(){$name=$this->__name;$names=&static::$meta->names;$hoops=&static::$meta->hoops;$expirations=&static::$meta->expirations;$instances=&static::$instances;if(isset($names[$name]))unset($names[$name]);if(isset($hoops[$name]))unset($hoops[$name]);if(isset($expirations[$name]))unset($expirations[$name]);if(isset($_SESSION[$name]))unset($_SESSION[$name]);if(isset($instances[$name]))unset($instances[$name]);}public function __isset($key){return isset($_SESSION[$this->__name][$key]);}public function __unset($key){$name=$this->__name;if(isset($_SESSION[$name][$key]))unset($_SESSION[$name][$key]);}public function __get($key){$name=$this->__name;if(isset($_SESSION[$name][$key]))return$_SESSION[$name][$key];return NULL;}public function __set($key,$value){$_SESSION[$this->__name][$key]=$value;}public function count(){return count($_SESSION[$this->__name]);}}}
namespace App\Views\Helpers{class Chars{public function Chars($count=4,$char=' '){return str_pad('',$count,$char);}}}
namespace MvcCore{class Debug{const DEBUG='debug',INFO='info',WARNING='warning',ERROR='error',EXCEPTION='exception',CRITICAL='critical',JAVASCRIPT='javascript';/** @var string */public static$EmailRecepient='admin@localhost';/** @var mixed */public static$LogDirectory='/Var/Logs';/** @var boolean */protected static$development=NULL;/** @var array */protected static$handlers=['timer'=>'timerHandler','dump'=>'dumpHandler','barDump'=>'dumpHandler','log'=>'dumpHandler','fireLog'=>'dumpHandler','exceptionHandler'=>'exceptionHandler','shutdownHandler'=>'ShutdownHandler',];/** @var array */protected static$dumps=[];/** @var array */protected static$timers=[];/** @var bool */protected static$originalDebugClass=TRUE;/** @var callable */public static$InitGlobalShortHands=[];public static function Init(){if(!is_null(static::$development))return;$app=\MvcCore::GetInstance();$configClass=$app->GetConfigClass();static::$development=$configClass::IsDevelopment();$cfg=$configClass::GetSystem();if(isset($cfg->debug)){$cfgDebug=&$cfg->debug;if(isset($cfgDebug->emailRecepient)){static::$EmailRecepient=$cfgDebug->emailRecepient;}if(isset($cfgDebug->logDirectory)){static::$LogDirectory=$cfgDebug->logDirectory;}}$scriptPath=php_sapi_name()=='cli'?str_replace('\\','/',getcwd()).'/'.$_SERVER['SCRIPT_FILENAME']:str_replace('\\','/',$_SERVER['SCRIPT_FILENAME']);$lastSlas=strrpos($scriptPath,'/');$appRoot=substr($scriptPath,0,$lastSlas!==FALSE?$lastSlas:strlen($scriptPath));static::$LogDirectory=$appRoot.static::$LogDirectory;static::$originalDebugClass=$app->GetDebugClass()==__CLASS__;static::initLogDirectory(static::$LogDirectory);static::initHandlers();$initGlobalShortHandsHandler=static::$InitGlobalShortHands;$initGlobalShortHandsHandler(static::$LogDirectory);}protected static function initHandlers(){foreach(static::$handlers as$key=>$value){static::$handlers[$key]=[__CLASS__,$value];}static::$handlers=(object)static::$handlers;register_shutdown_function(self::$handlers->shutdownHandler);}protected static function initLogDirectory($logDirectory){if(!\Packager_Php_Wrapper::IsDir($logDirectory))mkdir($logDirectory,0777,TRUE);if(!is_writable($logDirectory)){try{chmod($logDirectory,0777);}catch(\Exception$e){die('['.static::class.'] '.$e->getMessage());}}}public static function Timer($name=NULL){return static::BarDump(call_user_func(static::$handlers->timer,$name),$name);}public static function Dump($value,$return=FALSE){if(static::$originalDebugClass){$args=func_get_args();$options=isset($args[2])?['dieDumpCall'=>TRUE]:[];if($return)$options['doNotStore']=TRUE;$options['backtraceIndex']=1;$result=static::dumpHandler($value,NULL,$options);}else{$result=call_user_func(static::$handlers->dump,$value,$return);}if($return)return$result;}public static function BarDump($value,$title=NULL,$options=[]){return call_user_func_array(static::$handlers->barDump,func_get_args());}public static function Log($value,$priority=self::INFO){$args=func_get_args();if(static::$originalDebugClass){$content=date('[Y-m-d H-i-s]')."\n".static::dumpHandler($value,NULL,['doNotStore'=>TRUE,'backtraceIndex'=>1]);$content=str_replace("\n","\n\t",$content)."\n";$fullPath=static::$LogDirectory.DIRECTORY_SEPARATOR.$priority.'.log';file_put_contents($fullPath,$content,FILE_APPEND);return$fullPath;}else{return@call_user_func_array(static::$handlers->log,$args);}}public static function FireLog($message,$priority=self::DEBUG){$args=func_get_args();if(static::$originalDebugClass){$args=[$message,NULL,['priority'=>$priority]];}return call_user_func_array(static::$handlers->fireLog,$args);}public static function Exception($exception,$exit=TRUE){return call_user_func_array(static::$handlers->exceptionHandler,func_get_args());}public static function ShutdownHandler(){if(!count(static::$dumps))return;$dumps='';$dieDump=FALSE;foreach(static::$dumps as$values){$dumps.='<div class="item">';if(!is_null($values[1])){$dumps.='<pre class="title">'.$values[1].'</pre>';}$dumps.='<div class="value">'.preg_replace("#\[([^\]]*)\]=>([^\n]*)\n(\s*)#","[$1] => ",str_replace("<required>","&lt;required&gt;",$values[0])).'</div></div>';if(isset($values[2]['dieDumpCall'])&&$values[2]['dieDumpCall'])$dieDump=TRUE;}$template=\Packager_Php_Wrapper::FileGetContents(dirname(str_replace('\\','/',__DIR__).'/vendor/mvccore/mvccore/src/MvcCore/Debug.php').'/debug.html');echo  str_replace(['%mvccoreDumps%','%mvccoreDumpsCount%','%mvccoreDumpsClose%'],[$dumps,count(static::$dumps),$dieDump?';':'q();'],$template);}protected static function timerHandler($name=NULL){$now=microtime(TRUE);if(is_null($name))return$now-\MvcCore::GetInstance()->GetMicrotime();$difference=isset(static::$timers[$name])?$now-static::$timers[$name]:0;static::$timers[$name]=$now;return$difference;}protected static function dumpHandler($var,$title=NULL,$options=[]){ob_start();var_dump($var);$content=preg_replace("#\</small\>\n#",'</small>',ob_get_clean(),1);$content=preg_replace("#\<small\>([^\>]*)\>#",'',$content,1);$backtraceIndex=isset($options['backtraceIndex'])?$options['backtraceIndex']:2;$backtrace=debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS,$backtraceIndex+1);$originalPlace=(object)$backtrace[$backtraceIndex];$content='<small class="file">'.$originalPlace->file.':'.$originalPlace->line.'</small>'.$content;if(!isset($options['doNotStore']))static::$dumps[]=[$content,$title,$options];return$content;}protected static function exceptionHandler(\Exception$e,$exit=TRUE){throw$e;}}}namespace{\MvcCore\Debug::$InitGlobalShortHands=function(){function x($value,$title=NULL,$options=[]){return\MvcCore\Debug::BarDump($value,$title,$options);}function xx(){$args=func_get_args();foreach($args as$arg)\MvcCore\Debug::BarDump($arg);}function xxx($var=NULL,$title=NULL,$options=[]){$args=func_get_args();if(count($args)===0){throw new\Exception("Stopped.");}else{@header("Content-Type: text/html; charset=utf-8");foreach($args as$arg)\MvcCore\Debug::Dump($arg,FALSE,TRUE);}echo  ob_get_clean();die();}};}
namespace MvcCore{class Config{const ENVIRONMENT_DEVELOPMENT='development';const ENVIRONMENT_BETA='beta';const ENVIRONMENT_ALPHA='alpha';const ENVIRONMENT_PRODUCTION='production';/** @var string */public static$SystemConfigPath='/%appPath%/config.ini';/** @var string */protected static$environment='';/** @var \stdClass|array|boolean */protected static$systemConfig=NULL;/** @var mixed */protected static$booleanValues=['yes'=>TRUE,'no'=>FALSE,'true'=>TRUE,'false'=>FALSE,];/** @var array|\stdClass */protected$result=[];/** @var array */protected$objectTypes=[];public static function StaticInit(){if(!static::$environment){$serverAddress=static::getServerIp();$remoteAddress=static::getClientIp();if($serverAddress==$remoteAddress){static::$environment=static::ENVIRONMENT_DEVELOPMENT;}else{static::$environment=static::ENVIRONMENT_PRODUCTION;}}}public static function IsDevelopment(){return static::$environment==static::ENVIRONMENT_DEVELOPMENT;}public static function IsBeta(){return static::$environment==static::ENVIRONMENT_BETA;}public static function IsAlpha(){return static::$environment==static::ENVIRONMENT_ALPHA;}public static function IsProduction(){return static::$environment==static::ENVIRONMENT_PRODUCTION;}public static function GetEnvironment(){return static::$environment;}public static function SetEnvironment($environment=self::ENVIRONMENT_PRODUCTION){static::$environment=$environment;}public static function&GetSystem(){if(!static::$systemConfig){$systemConfigClass=\MvcCore::GetInstance()->GetConfigClass();$instance=new$systemConfigClass;static::$systemConfig=$instance->Load(str_replace('%appPath%',\MvcCore::GetInstance()->GetAppDir(),$systemConfigClass::$SystemConfigPath));}return static::$systemConfig;}protected static function getServerIp(){return isset($_SERVER['SERVER_ADDR'])?$_SERVER['SERVER_ADDR']:$_SERVER['LOCAL_ADDR'];}protected static function getClientIp(){return isset($_SERVER['HTTP_X_CLIENT_IP'])?$_SERVER['HTTP_X_CLIENT_IP']:$_SERVER['REMOTE_ADDR'];}public function&Load($configPath=''){$cfgFullPath=\MvcCore::GetInstance()->GetRequest()->AppRoot.$configPath;if(!\Packager_Php_Wrapper::FileExists($cfgFullPath))return FALSE;$rawIniData=\Packager_Php_Wrapper::ParseIniFile($cfgFullPath,TRUE);$environment=$this->detectEnvironmentBySystemConfig($rawIniData);if($rawIniData===FALSE)return FALSE;$iniData=$this->prepareIniDataToParse($rawIniData,$environment);$this->processIniData($iniData);foreach($this->objectTypes as&$objectType){if($objectType[0])$objectType[1]=(object)$objectType[1];}unset($this->objectTypes);return$this->result;}protected function&prepareIniDataToParse(&$rawIniData,$environment){$iniData=[];foreach($rawIniData as$keyOrSectionName=>$valueOrSectionValues){if(gettype($valueOrSectionValues)=='array'){if(strpos($keyOrSectionName,'>')!==FALSE){list($envNameLocal,$keyOrSectionName)=explode('>',str_replace(' ','',$keyOrSectionName));if($envNameLocal!==$environment)continue;}$sectionValues=[];foreach($valueOrSectionValues as$key=>$value)$sectionValues[$keyOrSectionName.'.'.$key]=$value;$iniData=array_merge($iniData,$sectionValues);}else{$iniData[$keyOrSectionName]=$valueOrSectionValues;}}return$iniData;}protected function detectEnvironmentBySystemConfig(array&$rawIni=[]){$environment='';if(isset($rawIni['environments'])){$environments=&$rawIni['environments'];$serverAddress=','.static::getServerIp().',';$serverComputerName=','.gethostname().',';foreach($environments as$environmentName=>$environmentComputerNamesOrIps){$environmentComputerNamesOrIps=','.$environmentComputerNamesOrIps.',';if(strpos($environmentComputerNamesOrIps,$serverAddress)!==FALSE||strpos($environmentComputerNamesOrIps,$serverComputerName)!==FALSE){$environment=$environmentName;break;}}}if($environment&&!static::$environment)static::SetEnvironment($environment);return static::$environment;}protected function processIniData(&$iniData){$this->objectTypes['']=[1,&$this->result];foreach($iniData as$rawKey=>$rawValue){$current=&$this->result;$rawKeys=[];$lastRawKey=$rawKey;$lastDotPos=strrpos($rawKey,'.');if($lastDotPos!==FALSE){$rawKeys=explode('.',substr($rawKey,0,$lastDotPos));$lastRawKey=substr($rawKey,$lastDotPos+1);}$levelKey='';$prevLevelKey='';foreach($rawKeys as$key){$prevLevelKey=$levelKey;$levelKey.=($levelKey?'.':'').$key;if(!isset($current[$key])){$current[$key]=[];$this->objectTypes[$levelKey]=[1,&$current[$key]];if($this->isKeyNumeric($key)&&isset($this->objectTypes[$prevLevelKey])){$this->objectTypes[$prevLevelKey][0]=0;}}$current=&$current[$key];}$typedValue=$this->getTypedValue($rawValue);if(isset($current[$lastRawKey])){$current[$lastRawKey][]=$typedValue;$this->objectTypes[$levelKey?$levelKey:$lastRawKey][0]=0;}else{if(gettype($current)!='array'){$current=[$current];$this->objectTypes[$levelKey]=[0,&$current];}$current[$lastRawKey]=$typedValue;if($this->isKeyNumeric($lastRawKey))$this->objectTypes[$levelKey][0]=0;}}}protected function isKeyNumeric($rawKey){$numericRawKey=preg_replace("#[^0-9\-]#",'',$rawKey);return$numericRawKey==$rawKey;}protected function getTypedValue($rawValue){if(gettype($rawValue)=="array"){foreach($rawValue as$key=>$value){$rawValue[$key]=$this->getTypedValue($value);}return$rawValue;}else{$numericRawVal=preg_replace("#[^0-9\-\.]#",'',$rawValue);if($numericRawVal==$rawValue){return$this->getTypedValueFloatIpOrInt($rawValue);}else{return$this->getTypedValueBoolOrString($rawValue);}}}protected function getTypedValueFloatIpOrInt($rawValue){if(strpos($rawValue,'.')!==FALSE){if(substr_count($rawValue,'.')===1){return floatval($rawValue);}else{return$rawValue;}}else{$intVal=intval($rawValue);return(string)$intVal===$rawValue?$intVal:$rawValue;}}protected function getTypedValueBoolOrString($rawValue){$lowerRawValue=strtolower($rawValue);if(isset(static::$booleanValues[$lowerRawValue])){return static::$booleanValues[$lowerRawValue];}else{return trim($rawValue);}}}\MvcCore\Config::StaticInit();}
namespace MvcCore{class Router{/** @var \MvcCore\Router */protected static$instance;/** @var \MvcCore\Request */protected$request;/** @var array */protected$routes=[];/** @var array */protected$urlRoutes=[];/** @var \MvcCore\Route */protected$currentRoute=NULL;/** @var bool */protected$routeToDefaultIfNotMatch=FALSE;public static function&GetInstance(array$routes=[]){if(!self::$instance){$routerClass=\MvcCore::GetInstance()->GetRouterClass();self::$instance=new$routerClass($routes);}return self::$instance;}public function __construct(array&$routes=[]){if($routes)$this->SetRoutes($routes);}public function SetRoutes(array$routes=[]){$this->routes=[];$this->AddRoutes($routes);return$this;}public function GetRoutes(){return$this->routes;}public function AddRoutes(array$routes=[],$prepend=FALSE){if($prepend)$routes=array_reverse($routes);foreach($routes as$routeName=>&$route){$routeType=gettype($route);$numericKey=is_numeric($routeName);if($route instanceof\MvcCore\Route){if(!$numericKey){$route->Name=$routeName;}}else if($routeType=='array'){if(!$numericKey){$route['name']=$routeName;}}else if($routeType=='string'){$route=['name'=>$routeName,'pattern'=>$route];}$this->AddRoute($route,$prepend);}return$this;}public function AddRoute($routeCfgOrRoute,$prepend=FALSE){if($routeCfgOrRoute instanceof\MvcCore\Route){$instance=&$routeCfgOrRoute;}else{$instance=\MvcCore\Route::GetInstance($routeCfgOrRoute);}if($prepend){$this->routes=array_merge([$instance->Name=>$instance],$this->routes);}else{$this->routes[$instance->Name]=&$instance;}$this->urlRoutes[$instance->Name]=&$instance;$this->urlRoutes[$instance->Controller.':'.$instance->Action]=&$instance;return$this;}public function SetCurrentRoute($currentRoute){$this->currentRoute=$currentRoute;return$this;}public function&GetCurrentRoute(){return$this->currentRoute;}public function GetRouteToDefaultIfNotMatch(){return$this->routeToDefaultIfNotMatch;}public function SetRouteToDefaultIfNotMatch($enable=TRUE){$this->routeToDefaultIfNotMatch=$enable;return$this;}public function&Route(\MvcCore\Request&$request){$this->request=$request;$chars="a-zA-Z0-9\-_/";$controllerName=$request->GetParam('controller',$chars);$actionName=$request->GetParam('action',$chars);if($controllerName&&$actionName){$this->routeByControllerAndActionQueryString($controllerName,$actionName);}else{$this->routeByRewriteRoutes();}$requestParams=&$this->request->Params;list($defaultCtrl,$defaultAction)=\MvcCore::GetInstance()->GetDefaultControllerAndActionNames();foreach(['controller'=>$defaultCtrl,'action'=>$defaultAction]as$mvcProperty=>$mvcValue){if(!isset($requestParams[$mvcProperty])||(isset($requestParams[$mvcProperty])&&strlen($requestParams[$mvcProperty])===0)){$requestParams[$mvcProperty]=\MvcCore\Tool::GetDashedFromPascalCase($mvcValue);}}if(!$this->currentRoute&&($this->request->Path=='/'||$this->routeToDefaultIfNotMatch)){$this->currentRoute=\MvcCore\Route::GetInstance(['name'=>"$defaultCtrl:$defaultAction",'controller'=>$defaultCtrl,'action'=>$defaultAction,]);}if($this->currentRoute){if(!$this->currentRoute->Controller){$this->currentRoute->Controller=\MvcCore\Tool::GetPascalCaseFromDashed($requestParams['controller']);}if(!$this->currentRoute->Action){$this->currentRoute->Action=\MvcCore\Tool::GetPascalCaseFromDashed($requestParams['action']);}}return$this->currentRoute;}public function Url($controllerActionOrRouteName='Index:Index',$params=[]){$result='';if(strpos($controllerActionOrRouteName,':')!==FALSE){list($ctrlPc,$actionPc)=explode(':',$controllerActionOrRouteName);$requestParams=$this->request->Params;if(!$ctrlPc)$ctrlPc=\MvcCore\Tool::GetPascalCaseFromDashed($requestParams['controller']);if(!$actionPc)$actionPc=\MvcCore\Tool::GetPascalCaseFromDashed($requestParams['action']);$controllerActionOrRouteName="$ctrlPc:$actionPc";}else if($controllerActionOrRouteName=='self'){$controllerActionOrRouteName=$this->currentRoute?$this->currentRoute->Name:':';$params=array_merge($this->request->Params,$params);unset($params['controller'],$params['action']);}$absolute=FALSE;if($params&&isset($params['absolute'])){$absolute=(bool)$params['absolute'];unset($params['absolute']);}if(isset($this->urlRoutes[$controllerActionOrRouteName])){$result=$this->urlByRoute($controllerActionOrRouteName,$params);}else{$result=$this->urlByQueryString($controllerActionOrRouteName,$params);}if($absolute)$result=$this->request->DomainUrl.$result;return$result;}protected function urlByQueryString($controllerActionOrRouteName,$params){list($contollerPascalCase,$actionPascalCase)=explode(':',$controllerActionOrRouteName);$controllerDashed=\MvcCore\Tool::GetDashedFromPascalCase($contollerPascalCase);$actionDashed=\MvcCore\Tool::GetDashedFromPascalCase($actionPascalCase);$result=$this->request->BasePath.$this->request->ScriptName."?controller=$controllerDashed&action=$actionDashed";if($params){$result.="&".http_build_query($params,"","&");}return$result;}protected function urlByRoute($controllerActionOrRouteName,$params){$route=$this->urlRoutes[$controllerActionOrRouteName];$result=$this->request->BasePath.rtrim($route->Reverse,'?&');$allParams=array_merge(is_array($route->Params)?$route->Params:[],$params);foreach($allParams as$key=>$value){$paramKeyReplacement="{%$key}";if(mb_strpos($result,$paramKeyReplacement)===FALSE){$glue=(mb_strpos($result,'?')===FALSE)?'?':'&';$result.=$glue.http_build_query([$key=>$value]);}else{$result=str_replace($paramKeyReplacement,$value,$result);}}return$result;}protected function routeByControllerAndActionQueryString($controllerName,$actionName){list($controllerDashed,$controllerPascalCase)=static::completeControllerActionParam($controllerName);list($actionDashed,$actionPascalCase)=static::completeControllerActionParam($actionName);$this->currentRoute=\MvcCore\Route::GetInstance(['name'=>"$controllerPascalCase:$actionPascalCase",'controller'=>$controllerPascalCase,'action'=>$actionPascalCase]);$this->request->Params['controller']=$controllerDashed;$this->request->Params['action']=$actionDashed;}protected function routeByRewriteRoutes(){$requestPath=$this->request->Path;foreach($this->routes as&$route){preg_match_all($route->Pattern,$requestPath,$patternMatches);if(count($patternMatches)>0&&count($patternMatches[0])>0){$this->currentRoute=$route;$controllerName=isset($route->Controller)?$route->Controller:'';$routeParams=['controller'=>\MvcCore\Tool::GetDashedFromPascalCase(str_replace(['_','\\'],'/',$controllerName)),'action'=>\MvcCore\Tool::GetDashedFromPascalCase(isset($route->Action)?$route->Action:''),];preg_match_all("#{%([a-zA-Z0-9]*)}#",$route->Reverse,$reverseMatches);if(isset($reverseMatches[1])&&$reverseMatches[1]){$reverseMatchesNames=$reverseMatches[1];array_shift($patternMatches);foreach($reverseMatchesNames as$key=>$reverseKey){if(isset($patternMatches[$key])&&count($patternMatches[$key])){if(!isset($route->Params[$reverseKey]))$route->Params[$reverseKey]=NULL;$routeParams[$reverseKey]=$patternMatches[$key][0];}else{break;}}}$routeDefaultParams=isset($route->Params)?$route->Params:[];$this->request->Params=array_merge($routeDefaultParams,$routeParams,$this->request->Params);break;}}}protected static function completeControllerActionParam($dashed=''){$pascalCase='';$dashed=strlen($dashed)>0?strtolower($dashed):'default';$pascalCase=preg_replace_callback("#(\-[a-z])#",function($m){return strtoupper(substr($m[0],1));},$dashed);$pascalCase=preg_replace_callback("#(_[a-z])#",function($m){return strtoupper($m[0]);},$pascalCase);$pascalCase=ucfirst($pascalCase);return [$dashed,$pascalCase];}}}
namespace{
class MvcCore{const VERSION='4.2.0';/** @var string */const COMPILED_PHP='PHP';/** @var string */const COMPILED_PHAR='PHAR';/** @var string */const COMPILED_SFU='SFU';/** @var string */const NOT_COMPILED='';/** @var MvcCore */protected static$instance;/** @var string */protected$compiled=null;/** @var int */protected$microtime=0;/** @var \MvcCore\Controller */protected$controller=NULL;/** @var \MvcCore\Request */protected$request;/** @var \MvcCore\Response */protected$response;/** @var \MvcCore\Router */protected$router=null;/** @var callable[] */protected$preRouteHandlers=[];/** @var callable[] */protected$preDispatchHandlers=[];/** @var callable[] */protected$postDispatchHandlers=[];/** @var string */protected$configClass='\MvcCore\Config';/** @var string */protected$sessionClass='\MvcCore\Session';/** @var string */protected$requestClass='\MvcCore\Request';/** @var string */protected$responseClass='\MvcCore\Response';/** @var string */protected$routerClass='\MvcCore\Router';/** @var string */protected$viewClass='\MvcCore\View';/** @var string */protected$debugClass='\MvcCore\Debug';/** @var string */protected$appDir='App';/** @var string */protected$controllersDir='Controllers';/** @var string */protected$viewsDir='Views';/** @var string */protected$defaultControllerName='Index';/** @var string */protected$defaultControllerDefaultActionName='Index';/** @var string */protected$defaultControllerErrorActionName='Error';/** @var string */protected$defaultControllerNotFoundActionName='NotFound';public static function StaticInit(){$instance=static::GetInstance();$instance->microtime=microtime(TRUE);if(is_null($instance->compiled)){$compiled=static::NOT_COMPILED;if(strpos(str_replace('\\','/',__DIR__).'/vendor/mvccore/mvccore/src/MvcCore.php','phar://')===0){$compiled=static::COMPILED_PHAR;}else if(class_exists('\Packager_Php_Wrapper')){$compiled=constant('\Packager_Php_Wrapper::FS_MODE');}$instance->compiled=$compiled;}}public static function&GetInstance(){if(!static::$instance)static::$instance=new static();return static::$instance;}public static function AddPreRouteHandler(callable$handler){static::GetInstance()->preRouteHandlers[]=$handler;}public static function AddPreDispatchHandler(callable$handler){static::GetInstance()->preDispatchHandlers[]=$handler;}public static function AddPostDispatchHandler(callable$handler){static::GetInstance()->postDispatchHandlers[]=$handler;}public static function SessionStart(){$sessionClass=\MvcCore::GetInstance()->sessionClass;$sessionClass::Start();}public function GetCompiled(){return$this->compiled;}public function GetRequestClass(){return$this->requestClass;}public function GetResponseClass(){return$this->responseClass;}public function GetRouterClass(){return$this->routerClass;}public function GetConfigClass(){return$this->configClass;}public function GetSessionClass(){return$this->sessionClass;}public function GetViewClass(){return$this->viewClass;}public function GetDebugClass(){return$this->debugClass;}public function GetMicrotime(){return$this->microtime;}public function GetRouter(){return$this->router;}public function&GetController(){return$this->controller;}public function&GetRequest(){return$this->request;}public function&GetResponse(){return$this->response;}public function GetAppDir(){return$this->appDir;}public function GetControllersDir(){return$this->controllersDir;}public function GetViewsDir(){return$this->viewsDir;}public function GetDefaultControllerAndActionNames(){return [$this->defaultControllerName,$this->defaultControllerDefaultActionName];}public function SetCompiled($compiled=''){$this->compiled=$compiled;return$this;}public function SetConfigClass($configClass){@class_exists($configClass);$this->configClass=$configClass;return$this;}public function SetSessionClass($sessionClass){@class_exists($sessionClass);$this->sessionClass=$sessionClass;return$this;}public function SetRequestClass($requestClass){@class_exists($requestClass);$this->requestClass=$requestClass;return$this;}public function SetResponseClass($responseClass){@class_exists($responseClass);$this->responseClass=$responseClass;return$this;}public function SetRouterClass($routerClass){@class_exists($routerClass);$this->routerClass=$routerClass;return$this;}public function SetViewClass($viewClass){@class_exists($viewClass);$this->viewClass=$viewClass;return$this;}public function SetDebugClass($debugClass){@class_exists($debugClass);$this->debugClass=$debugClass;return$this;}public function SetAppDir($appDir){$this->appDir=$appDir;return$this;}public function SetControllersDir($controllersDir){$this->controllersDir=$controllersDir;return$this;}public function SetViewsDir($viewsDir){$this->viewsDir=$viewsDir;return$this;}public function SetDefaultControllerName($defaultControllerName){$this->defaultControllerName=$defaultControllerName;return$this;}public function SetDefaultControllerDefaultActionName($defaultActionName){$this->defaultControllerDefaultActionName=$defaultActionName;return$this;}public function SetDefaultControllerErrorActionName($defaultControllerErrorActionName){$this->defaultControllerErrorActionName=$defaultControllerErrorActionName;return$this;}public function SetDefaultControllerNotFoundActionName($defaultControllerNotFoundActionName){$this->defaultControllerNotFoundActionName=$defaultControllerNotFoundActionName;return$this;}public function Run($singleFileUrl=FALSE){if($singleFileUrl)$this->compiled=static::COMPILED_SFU;return$this->process();}protected function process(){$this->request=\MvcCore\Request::GetInstance($_SERVER,$_GET,$_POST);$this->response=\MvcCore\Response::GetInstance();$debugClass=$this->debugClass;$debugClass::Init();if(!$this->processCustomHandlers($this->preRouteHandlers))return$this->Terminate();if(!$this->routeRequest())return$this->Terminate();if(!$this->processCustomHandlers($this->preDispatchHandlers))return$this->Terminate();if(!$this->DispatchMvcRequest($this->router->GetCurrentRoute()))return$this->Terminate();if(!$this->processCustomHandlers($this->postDispatchHandlers))return$this->Terminate();return$this->Terminate();}protected function routeRequest(){$routerClass=$this->routerClass;$this->router=$routerClass::GetInstance();try{$this->router->Route($this->request);return TRUE;}catch(\Exception$e){return$this->DispatchException($e);}}protected function processCustomHandlers(&$handlers=[]){if(!$this->IsAppRequest())return TRUE;$result=TRUE;foreach($handlers as$handler){if(is_callable($handler)){try{$handler($this->request,$this->response);}catch(\Exception$e){$this->DispatchException($e);$result=FALSE;break;}}}return$result;}public function DispatchMvcRequest(\MvcCore\Route&$route=NULL){if(is_null($route))return$this->DispatchException(new\Exception('No route for request',404));list($controllerNamePascalCase,$actionNamePascalCase)=[$route->Controller,$route->Action];$actionName=$actionNamePascalCase.'Action';$coreControllerName='\MvcCore\Controller';$requestParams=$this->request->Params;$viewScriptFullPath=\MvcCore\View::GetViewScriptFullPath(\MvcCore\View::$ScriptsDir,$requestParams['controller'].'/'.$requestParams['action']);if($controllerNamePascalCase=='Controller'){$controllerName=$coreControllerName;}else{$controllerName=$this->CompleteControllerName($controllerNamePascalCase);if(!class_exists($controllerName)){if(\Packager_Php_Wrapper::FileExists($viewScriptFullPath)){$controllerName=$coreControllerName;}}}return$this->DispatchControllerAction($controllerName,$actionName,$viewScriptFullPath,function(\Exception&$e){return$this->DispatchException($e);});}public function DispatchControllerAction($controllerClassFullName,$actionName,$viewScriptFullPath,callable$exceptionCallback){$this->controller=NULL;try{$this->controller=new$controllerClassFullName($this->request,$this->response);}catch(\Exception$e){return$this->DispatchException(new\ErrorException($e->getMessage(),404));}if(!method_exists($this->controller,$actionName)&&$controllerClassFullName!=='\MvcCore\Controller'){if(!\Packager_Php_Wrapper::FileExists($viewScriptFullPath)){$this->DispatchException(new\ErrorException("Controller '$controllerClassFullName' has not method '$actionName' "."or view doesn't exists in path: '$viewScriptFullPath'.",404));}}list($controllerNameDashed,$actionNameDashed)=[$this->request->Params['controller'],$this->request->Params['action']];try{$this->controller->Init();$this->controller->PreDispatch();if(method_exists($this->controller,$actionName))$this->controller->$actionName();$this->controller->Render($controllerNameDashed,$actionNameDashed);}catch(\Exception$e){return$exceptionCallback($e);}return TRUE;}public function Url($controllerActionOrRouteName='Index:Index',$params=[]){return\MvcCore\Router::GetInstance()->Url($controllerActionOrRouteName,$params);}public function Terminate(){$sessionClass=$this->sessionClass;$sessionClass::Close();$this->response->Send();exit;}public function DispatchException(\Exception$e){if(class_exists('\Packager_Php'))return FALSE;if($e->getCode()==404){\MvcCore\Debug::Log($e,\MvcCore\Debug::ERROR);$this->RenderNotFound($e->getMessage());}else if(\MvcCore\Config::IsDevelopment()){\MvcCore\Debug::Exception($e);}else{\MvcCore\Debug::Log($e,\MvcCore\Debug::EXCEPTION);$this->RenderError($e);}return FALSE;}public function RenderError(\Exception$e){$defaultCtrlFullName=$this->GetDefaultControllerIfHasAction($this->defaultControllerErrorActionName);$exceptionMessage=$e->getMessage();if($defaultCtrlFullName){$this->request->Params=array_merge($this->request->Params,['code'=>500,'message'=>$exceptionMessage,'controller'=>\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerName),'action'=>\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerErrorActionName),]);$this->DispatchControllerAction($defaultCtrlFullName,$this->defaultControllerErrorActionName."Action",'',function(\Exception&$e)use($exceptionMessage){\MvcCore\Debug::Log($e,\MvcCore\Debug::EXCEPTION);$this->RenderError500PlainText($exceptionMessage.PHP_EOL.PHP_EOL.$e->getMessage());});}else{$this->RenderError500PlainText($exceptionMessage);}}public function RenderNotFound($exceptionMessage=''){if(!$exceptionMessage)$exceptionMessage='Page not found.';$defaultCtrlFullName=$this->GetDefaultControllerIfHasAction($this->defaultControllerNotFoundActionName);if($defaultCtrlFullName){$this->request->Params=array_merge($this->request->Params,['code'=>404,'message'=>$exceptionMessage,'controller'=>\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerName),'action'=>\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerNotFoundActionName),]);$this->DispatchControllerAction($defaultCtrlFullName,$this->defaultControllerNotFoundActionName."Action",'',function(\Exception&$e){\MvcCore\Debug::Log($e,\MvcCore\Debug::EXCEPTION);$this->RenderError404PlainText();});}else{$this->RenderError404PlainText();}}public function RenderError500PlainText($text=''){if(!$text)$text='Internal Server Error.';$this->response=(new\MvcCore\Response(\MvcCore\Response::INTERNAL_SERVER_ERROR,['Content-Type'=>'text/plain'],"Error 500:".PHP_EOL.PHP_EOL.$text));}public function RenderError404PlainText(){$this->response=(new\MvcCore\Response(\MvcCore\Response::NOT_FOUND,['Content-Type'=>'text/plain'],'Error 404 – Page Not Found.'));}public function GetDefaultControllerIfHasAction($actionName){$defaultControllerName=$this->CompleteControllerName($this->defaultControllerName);if(class_exists($defaultControllerName)&&method_exists($defaultControllerName,$actionName.'Action')){return$defaultControllerName;}return'';}public function CompleteControllerName($controllerNamePascalCase){$firstChar=substr($controllerNamePascalCase,0,1);if($firstChar=='\\')return$controllerNamePascalCase;return implode('\\',[$this->appDir,$this->controllersDir,$controllerNamePascalCase]);}public function IsErrorDispatched(){$defaultCtrlName=\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerName);$errorActionName=\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerErrorActionName);$params=$this->request->Params;return$params['controller']==$defaultCtrlName&&$params['action']==$errorActionName;}public function IsNotFoundDispatched(){$defaultCtrlName=\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerName);$errorActionName=\MvcCore\Tool::GetDashedFromPascalCase($this->defaultControllerNotFoundActionName);$params=$this->request->Params;return$params['controller']==$defaultCtrlName&&$params['action']==$errorActionName;}public function IsAppRequest(){$params=$this->request->Params;$ctrlName=isset($params['controller'])?$params['controller']:'';if($ctrlName!='controller')return true;$actionName=isset($params['action'])?$params['action']:'';return$actionName!='asset';}}\MvcCore::StaticInit();
}
namespace MvcCore{class Request{const PROTOCOL_HTTP='http:';const PROTOCOL_HTTPS='https:';const METHOD_GET='GET';const METHOD_POST='POST';/** @var string */public$Lang='';/** @var string */public$Locale='';/** @var string */public$Protocol='';/** @var string */public$ServerName='';/** @var string */public$Host='';/** @var string */public$Port='';/** @var string */public$Path='';/** @var string */public$Query='';/** @var mixed */public$Fragment='';/** @var string */public$ScriptName='';/** @var string */public$AppRoot='';/** @var string */public$BasePath='';/** @var string */public$RequestPath='';/** @var string */public$DomainUrl='';/** @var string */public$BaseUrl='';/** @var string */public$RequestUrl='';/** @var string */public$FullUrl='';/** @var string */public$Method='';/** @var string */public$Referer='';/** @var array */public$Params=[];/** @var string */public$MediaSiteKey='';/** @var array */protected$serverGlobals=[];/** @var array */protected$getGlobals=[];/** @var array */protected$postGlobals=[];/** @var array */protected$indexScriptName='';/** @var mixed */protected$appRequest=-1;public static function GetInstance(array&$server,array&$get,array&$post){$requestClass=\MvcCore::GetInstance()->GetRequestClass();return new$requestClass($server,$get,$post);}public function __construct(array&$server,array&$get,array&$post){$this->serverGlobals=$server;$this->getGlobals=$get;$this->postGlobals=$post;$this->initScriptName();$this->initAppRoot();$this->initMethod();$this->initBasePath();$this->initProtocol();$this->initParsedUrlSegments();$this->initHttpParams();$this->initPath();$this->initReferer();$this->initUrlCompositions();unset($this->serverGlobals,$this->getGlobals,$this->postGlobals);}public function __call($rawName,$arguments=[]){$nameBegin=strtolower(substr($rawName,0,3));$name=substr($rawName,3);if($nameBegin=='get'&&isset($this->$name)){return$this->$name;}else if($nameBegin=='set'){$this->$name=isset($arguments[0])?$arguments[0]:NULL;return$this;}else{throw new\Exception('['.__CLASS__."] No property with name '$name' defined.");}}public function __get($name){return isset($this->$name)?$this->$name:NULL;}public function __set($name,$value){$this->$name=$value;}public function SetParam($name="",$value=""){$this->Params[$name]=$value;return$this;}public function GetParam($name="",$pregReplaceAllowedChars="a-zA-Z0-9_/\-\.\@"){$result='';$params=$this->Params;if(isset($params[$name])){$rawValue=trim($params[$name]);if(mb_strlen($rawValue)>0){if(!$pregReplaceAllowedChars||$pregReplaceAllowedChars==".*"){$result=$rawValue;}else{$pattern="#[^".$pregReplaceAllowedChars."]#";$result=preg_replace($pattern,"",$rawValue);}}}return$result;}public function IsAppRequest(){if($this->appRequest==-1){$this->appRequest=1;$ctrl='controller';$action='action';if(isset($this->Params[$ctrl])&&isset($this->Params[$action])){if($this->Params[$ctrl]==$ctrl&&$this->Params[$action]=='asset'){$this->appRequest=0;}}}return(bool)$this->appRequest;}protected function initScriptName(){$this->indexScriptName=str_replace('\\','/',$this->serverGlobals['SCRIPT_NAME']);$this->ScriptName='/'.substr($this->indexScriptName,strrpos($this->indexScriptName,'/')+1);}protected function initAppRoot(){$indexFilePath=ucfirst(str_replace('\\','/',$this->serverGlobals['SCRIPT_FILENAME']));if(strpos(str_replace('\\','/',__DIR__).'/vendor/mvccore/mvccore/src/MvcCore/Request.php','phar://')===0){$appRootFullPath='phar://'.$indexFilePath;}else{$appRootFullPath=substr($indexFilePath,0,mb_strrpos($indexFilePath,'/'));}$this->AppRoot=str_replace(['\\','//'],'/',$appRootFullPath);}protected function initMethod(){$this->Method=strtoupper($this->serverGlobals['REQUEST_METHOD']);}protected function initBasePath(){$lastSlashPos=mb_strrpos($this->indexScriptName,'/');if($lastSlashPos!==FALSE){$this->BasePath=mb_substr($this->indexScriptName,0,$lastSlashPos);}else{$this->BasePath='';}}protected function initProtocol(){$this->Protocol=static::PROTOCOL_HTTP;if(isset($this->serverGlobals['HTTPS'])&&strtolower($this->serverGlobals['HTTPS'])=='on'){$this->Protocol=static::PROTOCOL_HTTPS;}}protected function initParsedUrlSegments(){$absoluteUrl=$this->Protocol.'//'.$this->serverGlobals['HTTP_HOST'].$this->serverGlobals['REQUEST_URI'];$parsedUrl=parse_url($absoluteUrl);$keyUc='';foreach($parsedUrl as$key=>$value){$keyUc=ucfirst($key);if(isset($this->$keyUc)){$this->$keyUc=(string)$value;}}$this->ServerName=$this->serverGlobals['SERVER_NAME'];$this->Host=$this->serverGlobals['HTTP_HOST'];}protected function initHttpParams(){$params=array_merge($this->getGlobals);if($this->Method==self::METHOD_POST){$postValues=[];if(count($this->postGlobals)>0){$postValues=$this->postGlobals;}else{$postValues=$this->initParamsCompletePostData();}$params=array_merge($params,$postValues);}$this->Params=$params;}private function initParamsCompletePostData(){$result=[];$rawPhpInput=\Packager_Php_Wrapper::FileGetContents('php://input');$decodedJsonResult=\MvcCore\Tool::DecodeJson($rawPhpInput);if($decodedJsonResult->success){$result=(array)$decodedJsonResult->data;}else{$rows=explode('&',$rawPhpInput);foreach($rows as$row){list($key,$value)=explode('=',$row);$result[$key]=$value;}}return$result;}protected function initPath(){$requestUrl=$this->serverGlobals['REQUEST_URI'];$path='/'.ltrim(mb_substr($requestUrl,mb_strlen($this->BasePath)),'/');if(mb_strpos($path,'?')!==FALSE)$path=mb_substr($path,0,mb_strpos($path,'?'));$this->Path=$path;}protected function initReferer(){$referer=isset($_SERVER['HTTP_REFERER'])?$_SERVER['HTTP_REFERER']:'';if($referer){$referer=filter_var($referer,FILTER_SANITIZE_URL);$this->Referer=$referer?$referer:'';}}protected function initUrlCompositions(){$this->RequestPath=$this->Path.(($this->Query)?'?'.$this->Query:'').$this->Fragment;$this->DomainUrl=$this->Protocol.'//'.$this->Host;$this->BaseUrl=$this->DomainUrl.$this->BasePath;$this->RequestUrl=$this->BaseUrl.$this->Path;$this->FullUrl=$this->RequestUrl.(($this->Query)?'?'.$this->Query:'');}}}
namespace MvcCore{abstract class Model{/** @var array */protected static$connectionArguments=['4D'=>['dsn'=>'{driver}:host={host};charset=UTF-8','auth'=>TRUE,'fileDb'=>FALSE,'options'=>[],],'firebird'=>['dsn'=>'{driver}:host={host};dbname={dbname};charset=UTF8','auth'=>TRUE,'fileDb'=>TRUE,'options'=>[]],'ibm'=>['dsn'=>'ibm:DRIVER={IBM DB2 ODBC DRIVER};DATABASE={dbname};HOSTNAME={host};PORT={port};PROTOCOL=TCPIP;','auth'=>TRUE,'fileDb'=>FALSE,'options'=>[],],'informix'=>['dsn'=>'{driver}:host={host};service={service};database={dbname};server={server};protocol={protocol};EnableScrollableCursors=1','auth'=>TRUE,'fileDb'=>FALSE,'options'=>[],],'mysql'=>['dsn'=>'{driver}:host={host};dbname={dbname}','auth'=>TRUE,'fileDb'=>FALSE,'options'=>['\PDO::ATTR_EMULATE_PREPARES'=>FALSE,'\PDO::MYSQL_ATTR_MULTI_STATEMENTS'=>TRUE,'\PDO::MYSQL_ATTR_INIT_COMMAND'=>"SET NAMES 'UTF8'",],],'sqlite'=>['dsn'=>'{driver}:{dbname}','auth'=>FALSE,'fileDb'=>TRUE,'options'=>[],],'sqlsrv'=>['dsn'=>'{driver}:Server={host};Database={dbname}','auth'=>TRUE,'fileDb'=>FALSE,'options'=>[],],'default'=>['dsn'=>'{driver}:host={host};dbname={dbname}','auth'=>TRUE,'fileDb'=>FALSE,'options'=>[],],];/** @var int */protected static$connectionIndex=-1;/** @var array */protected static$connections=[];/** @var array */protected static$instances=[];/** @var array */protected static$configs=[];/** @var bool */protected$autoInit=TRUE;/** @var \PDO */protected$db;/** @var \stdClass */protected$cfg;/** @var \MvcCore\Model */protected$resource;public function GetValues($getNullValues=FALSE,$includeInheritProperties=TRUE,$publicOnly=TRUE){$data=[];$systemProperties=['autoInit'=>1,'db'=>1,'cfg'=>1,'resource'=>1];$modelClassName=get_class($this);$classReflector=new\ReflectionClass($modelClassName);$properties=$publicOnly?$classReflector->getProperties(\ReflectionProperty::IS_PUBLIC):$classReflector->getProperties();foreach($properties as$property){if(!$includeInheritProperties&&$property->class!=$modelClassName)continue;$propertyName=$property->name;if(isset($systemProperties[$propertyName]))continue;if(!$getNullValues&&is_null($this->$propertyName))continue;$data[$propertyName]=$this->$propertyName;}return$data;}public function SetUp($data=[],$keysInsensitive=FALSE,$includeInheritProperties=TRUE,$publicOnly=TRUE){$modelClassName=get_class($this);$classReflector=new\ReflectionClass($modelClassName);$properties=$publicOnly?$classReflector->getProperties(\ReflectionProperty::IS_PUBLIC):$classReflector->getProperties();$dataKeys=$keysInsensitive?','.implode(',',array_keys($data)).',':'';foreach($properties as$property){if(!$includeInheritProperties&&$property->class!=$modelClassName)continue;$propertyName=$property->name;if(isset($data[$propertyName])){$value=$data[$propertyName];}else if($keysInsensitive){$dataKeyPos=stripos($dataKeys,','.$propertyName.',');if($dataKeyPos===FALSE)continue;$dataKey=substr($dataKeys,$dataKeyPos+1,strlen($propertyName));$value=$data[$dataKey];}else{continue;}if(preg_match('/@var\s+([^\s]+)/',$property->getDocComment(),$matches)){list(,$type)=$matches;settype($value,$type);}$this->$propertyName=$value;}return$this;}public static function GetInstance(){$className=get_called_class();$args=func_get_args();$instanceIndex=md5($className.'_'.serialize($args));if(!isset(self::$instances[$instanceIndex])){$reflectionClass=new\ReflectionClass($className);$instance=$reflectionClass->newInstanceArgs($args);self::$instances[$instanceIndex]=$instance;}return self::$instances[$instanceIndex];}public static function GetResource($args=[],$modelClassName='',$resourceClassPath='\Resource'){$result=NULL;if(!$modelClassName)$modelClassName=get_called_class();if(strpos($modelClassName,'\Resource')===FALSE){$resourceClassName=$modelClassName.$resourceClassPath;if(class_exists($resourceClassName)){$result=call_user_func_array([$resourceClassName,'GetInstance'],$args);}}return$result;}public function __construct($connectionIndex=-1){if($this->autoInit)$this->Init($connectionIndex);}public function Init($connectionIndex=-1){$this->db=static::GetDb($connectionIndex);$this->cfg=static::GetCfg($connectionIndex);$this->resource=static::GetResource([],get_class($this));}public static function GetDb($connectionIndex=-1){if(!isset(static::$connections[$connectionIndex])){static::loadConfigs();if($connectionIndex==-1)$connectionIndex=static::$connectionIndex;if($connectionIndex==-1)$connectionIndex=self::$connectionIndex;$cfg=static::GetCfg($connectionIndex);$conArgs=(object)self::$connectionArguments[isset(self::$connectionArguments[$cfg->driver])?$cfg->driver:'default'];$connection=NULL;if($conArgs->fileDb){$appRoot=\MvcCore::GetInstance()->GetRequest()->AppRoot;if(strpos($appRoot,'phar://')!==FALSE){$lastSlashPos=strrpos($appRoot,'/');$appRoot=substr($appRoot,7,$lastSlashPos-7);}$cfg->dbname=realpath($appRoot.$cfg->dbname);}$dsn=$conArgs->dsn;foreach($cfg as$key=>$value)$dsn=str_replace('{'.$key.'}',$value,$dsn);if($conArgs->auth){$connection=new\PDO($dsn,$cfg->username,$cfg->password,$conArgs->options);}else{$connection=new\PDO($dsn);}static::$connections[$connectionIndex]=$connection;}return static::$connections[$connectionIndex];}public static function GetCfg($connectionIndex=-1){static::loadConfigs();if($connectionIndex==-1)$connectionIndex=static::$connectionIndex;if($connectionIndex==-1)$connectionIndex=self::$connectionIndex;$baseType=gettype(static::$configs);if($baseType=='array'&&isset(static::$configs[$connectionIndex])){return static::$configs[$connectionIndex];}else if($baseType=='object'&&isset(static::$configs->$connectionIndex)){return static::$configs->$connectionIndex;}else{return static::$configs;}}protected static function loadConfigs(){if(empty(static::$configs)){$cfg=\MvcCore\Config::GetSystem();if($cfg===FALSE){$cfgPath=\MvcCore\Config::$SystemConfigPath;throw new\Exception('['.__CLASS__."] System config.ini not found in '$cfgPath'.");}if(!isset($cfg->db)){throw new\Exception('['.__CLASS__."] No [db] section and no records matched 'db.*' found in system config.ini.");}$cfgType=gettype($cfg->db);if($cfgType=='array'&&isset($cfg->db['defaultDbIndex'])){self::$connectionIndex=$cfg->db['defaultDbIndex'];}else if($cfgType=='object'&&isset($cfg->db->defaultDbIndex)){self::$connectionIndex=$cfg->db->defaultDbIndex;}static::$configs=$cfg->db;}}public function __call($rawName,$arguments=[]){$nameBegin=strtolower(substr($rawName,0,3));$name=substr($rawName,3);if($nameBegin=='get'&&isset($this->$name)){return$this->$name;}else if($nameBegin=='set'){$this->$name=isset($arguments[0])?$arguments[0]:NULL;return$this;}else{throw new\Exception('['.__CLASS__."] No property with name '$name' defined.");}}public function __set($name,$value){$this->$name=$value;}public function __get($name){return(isset($this->$name))?$this->$name:null;}}}
namespace MvcCore\Ext\Request{class Cli extends\MvcCore\Request{const VERSION='4.2.0';/** @var bool */public$Console=FALSE;public function __construct(array&$server,array&$get,array&$post){$this->serverGlobals=$server;$this->getGlobals=$get;$this->postGlobals=$post;$this->Console=php_sapi_name()=='cli';$this->initScriptName();$this->initAppRoot();if($this->Console){$this->initCliParams();}else{$this->initMethod();$this->initBasePath();$this->initProtocol();$this->initParsedUrlSegments();$this->initHttpParams();$this->initPath();$this->initReferer();$this->initUrlCompositions();}unset($this->serverGlobals,$this->getGlobals,$this->postGlobals);}protected function initScriptName(){$this->indexScriptName=str_replace('\\','/',$this->serverGlobals['SCRIPT_NAME']);if(!$this->Console)$this->ScriptName='/'.substr($this->indexScriptName,strrpos($this->indexScriptName,'/')+1);}protected function initAppRoot(){$indexFilePath=$this->Console?str_replace('\\','/',getcwd()).'/'.$_SERVER['SCRIPT_FILENAME']:ucfirst(str_replace('\\','/',$this->serverGlobals['SCRIPT_FILENAME']));if(strpos(str_replace('\\','/',__DIR__).'/vendor/mvccore/ext-request-cli/src/MvcCore/Ext/Request/Cli.php','phar://')===0){$appRootFullPath='phar://'.$indexFilePath;}else{$appRootFullPath=substr($indexFilePath,0,mb_strrpos($indexFilePath,'/'));}$this->AppRoot=str_replace(['\\','//'],'/',$appRootFullPath);}protected function initCliParams(){$rawArgs=$this->serverGlobals['argv'];if(isset($rawArgs[0])&&$rawArgs[0]==$this->indexScriptName)array_shift($rawArgs);$params=[];$dash='-';for($i=0,$l=count($rawArgs);$i<$l;$i+=1){$rawArg=$rawArgs[$i];$nextRawArg=isset($rawArgs[$i+1])?$rawArgs[$i+1]:NULL;$nextRawArgIsValue=!is_null($nextRawArg)&&substr($nextRawArg,0,1)!=$dash;$rawArgLength=strlen($rawArg);if($rawArgLength>1){$firstChar=substr($rawArg,0,1);$secondChar=substr($rawArg,1,1);if($firstChar==$dash&&$secondChar!=$dash){$i=$this->initCliParamSingleDash($i,$params,$rawArg,$nextRawArg,$nextRawArgIsValue);}else if($firstChar==$dash&&$secondChar==$dash){$i=$this->initCliParamDoubleDash($i,$params,$rawArg,$nextRawArg,$nextRawArgIsValue);}else{$this->initCliParamNoDash($params,$rawArg);}}}$this->initCliParamsCleanQuotes($params);$this->Params=$params;}protected function initCliParamSingleDash($i,&$params,&$rawArg,&$nextRawArg,&$nextRawArgIsValue){$param=substr($rawArg,1);$equalPos=strpos($param,'=');if($equalPos!==FALSE){$params[substr($param,0,$equalPos)]=substr($param,$equalPos+1);}else{if(strlen($param)>1&&!$nextRawArgIsValue){for($j=0,$k=strlen($param);$j<$k;$j+=1)$params[$param[$j]]=TRUE;}else{if($param=='c'&&$nextRawArgIsValue){$params['controller']=$nextRawArg;}else if($param=='a'&&$nextRawArgIsValue){$params['action']=$nextRawArg;}else{$params[$param]=$nextRawArg;}$i+=1;}}return$i;}protected function initCliParamDoubleDash($i,&$params,&$rawArg,&$nextRawArg,&$nextRawArgIsValue){$param=substr($rawArg,2);$equalPos=strpos($param,'=');if($equalPos!==FALSE){$params[substr($param,0,$equalPos)]=substr($param,$equalPos+1);}else if($nextRawArgIsValue){$params[$param]=$nextRawArg;$i+=1;}else{$params[$param]=TRUE;}return$i;}protected function initCliParamNoDash(&$params,&$rawArg){$equalPos=strpos($rawArg,'=');if($equalPos!==FALSE){$params[substr($rawArg,0,$equalPos)]=substr($rawArg,$equalPos+1);}else{array_push($params,$rawArg);}}protected function initCliParamsCleanQuotes(&$params){$quotChars=['"',"'",'`'];foreach($params as&$value){foreach($quotChars as$quotChar){if(mb_strpos($value,$quotChar)!==0)continue;if(mb_strrpos($value,$quotChar)!==mb_strlen($value)-1)continue;$value=trim($value,$quotChar);}}}}}
namespace MvcCore{class View{/** @var string */const DOCTYPE_HTML4='HTML4';/** @var string */const DOCTYPE_XHTML='XHTML';/** @var string */const DOCTYPE_HTML5='HTML5';/** @var string */const EXTENSION='.phtml';/** @var string */public static$Doctype=self::DOCTYPE_HTML5;/** @var string */public static$ScriptsDir='Scripts';/** @var string */public static$HelpersDir='Helpers';/** @var string */public static$LayoutsDir='Layouts';/** @var array */public static$HelpersClassBases=[];/** @var \MvcCore\Controller|mixed */public$Controller;/** @var string */private$_content='';/** @var array */private$_renderedFullPaths=[];/** @var string */protected static$originalyDeclaredProperties=['Controller'=>1,'_content'=>1,'_renderedFullPaths'=>1,];/** @var array */private static$_helpers=[];public static function StaticInit(){$app=\MvcCore::GetInstance();static::$HelpersClassBases=['\MvcCore\Ext\View\Helpers\\','\\'.implode('\\',[$app->GetAppDir(),$app->GetViewsDir(),static::$HelpersDir]).'\\',];}public static function AddHelpersClassBases(){$args=func_get_args();foreach($args as$arg){static::$HelpersClassBases[]='\\'.trim($arg,'\\').'\\';}}public static function GetViewScriptFullPath($typePath='',$corectedRelativePath=''){$app=\MvcCore::GetInstance();return implode('/',[$app->GetRequest()->AppRoot,$app->GetAppDir(),$app->GetViewsDir(),$typePath,$corectedRelativePath.\MvcCore\View::EXTENSION]);}public function __construct(\MvcCore\Controller&$controller){$this->Controller=$controller;}public function SetUp(&$paramsInstance){$params=get_object_vars($paramsInstance);foreach($params as$key=>$value){if(isset(static::$originalyDeclaredProperties[$key]))continue;$this->$key=$value;}}public function GetContent(){return$this->_content;}public function GetController(){return$this->Controller;}public function RenderScript($relativePath=''){return$this->Render(static::$ScriptsDir,$relativePath);}public function RenderLayout($relativePath=''){return$this->Render(static::$LayoutsDir,$relativePath);}public function RenderLayoutAndContent($relativePath='',$content=''){$this->_content=$content;return$this->Render(static::$LayoutsDir,$relativePath);}public function Render($typePath='',$relativePath=''){if(!$typePath)$typePath=self::$ScriptsDir;$result='';$relativePath=$this->_correctRelativePath($this->Controller->GetRequest()->AppRoot,$typePath,$relativePath);$viewScriptFullPath=static::GetViewScriptFullPath($typePath,$relativePath);if(!\Packager_Php_Wrapper::FileExists($viewScriptFullPath)){throw new\Exception('['.__CLASS__."] Template not found in path: '$viewScriptFullPath'.");}$this->_renderedFullPaths[]=$viewScriptFullPath;ob_start();\Packager_Php_Wrapper::IncludeStandard(($viewScriptFullPath),$this);$result=ob_get_clean();array_pop($this->_renderedFullPaths);return$result;}public function Evaluate($content=''){ob_start();try{eval(' ?'.'>'.$content.'<'.'?php ');}catch(\Exception$e){throw$e;}return ob_get_clean();}public function Url($controllerActionOrRouteName='Index:Index',$params=[]){return\MvcCore\Router::GetInstance()->Url($controllerActionOrRouteName,$params);}public function AssetUrl($path=''){return$this->Controller->AssetUrl($path);}public function __set($name,$value){if(isset(static::$originalyDeclaredProperties[$name])){throw new\Exception('['.__CLASS__."] It's not possible to change property: '$name' originaly declared in class ".__CLASS__.'.');}$this->$name=$value;}public function __call($method,$arguments){$result='';foreach(static::$HelpersClassBases as$helperClassBase){$className=$helperClassBase.ucfirst($method);if(class_exists($className)){if(isset(self::$_helpers[$method])&&get_class(self::$_helpers[$method])==$className){$instance=self::$_helpers[$method];$result=call_user_func_array([$instance,$method],$arguments);}else{$instance=new$className($this);$result=call_user_func_array([$instance,$method],$arguments);}break;}}return$result;}private function _correctRelativePath($appRoot,$typePath,$relativePath){$result=str_replace('\\','/',$relativePath);if(substr($relativePath,0,2)=='./'){$app=\MvcCore::GetInstance();$typedViewDirFullPath=implode('/',[$appRoot,$app->GetAppDir(),$app->GetViewsDir(),$typePath]);$lastRenderedFullPath=$this->_renderedFullPaths[count($this->_renderedFullPaths)-1];$renderedRelPath=substr($lastRenderedFullPath,strlen($typedViewDirFullPath));$renderedRelPathLastSlashPos=strrpos($renderedRelPath,'/');if($renderedRelPathLastSlashPos!==FALSE){$result=substr($renderedRelPath,0,$renderedRelPathLastSlashPos+1).substr($relativePath,2);$result=ltrim($result,'/');}}return$result;}}View::StaticInit();}
namespace MvcCore{class Controller{/** @var \MvcCore\Request */protected$request;/** @var \MvcCore\Response */protected$response;/** @var string */protected$controller='';/** @var string */protected$action='';/** @var boolean */protected$ajax=FALSE;/** @var \MvcCore\View */protected$view=NULL;/** @var string */protected$layout='layout';/** @var boolean */protected$viewEnabled=TRUE;/** @var string */protected static$staticPath='/static';/** @var string */protected static$tmpPath='/Var/Tmp';/** @var string */private static$_assetsMimeTypes=['js'=>'text/javascript','css'=>'text/css','ico'=>'image/x-icon','gif'=>'image/gif','png'=>'image/png','jpg'=>'image/jpg','jpeg'=>'image/jpeg','bmp'=>'image/bmp','svg'=>'image/svg+xml','eot'=>'application/vnd.ms-fontobject','ttf'=>'font/truetype','otf'=>'font/opentype','woff'=>'application/x-font-woff',];public function __construct(\MvcCore\Request&$request=NULL,\MvcCore\Response&$response=NULL){$this->request=&$request;$this->controller=$request->Params['controller'];$this->action=$request->Params['action'];if($this->controller=='controller'&&$this->action=='asset'){$this->DisableView();return;}$this->response=&$response;if(isset($_SERVER['HTTP_X_REQUESTED_WITH'])&&strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])=='xmlhttprequest'){$this->ajax=TRUE;$this->DisableView();}}public function Init(){\MvcCore::SessionStart();}public function PreDispatch(){if($this->viewEnabled){$viewClass=\MvcCore::GetInstance()->GetViewClass();$this->view=new$viewClass($this);}}public function GetParam($name="",$pregReplaceAllowedChars="a-zA-Z0-9_/\-\.\@"){return$this->request->GetParam($name,$pregReplaceAllowedChars);}public function&GetRequest(){return$this->request;}public function SetRequest(\MvcCore\Request&$request){$this->request=$request;return$this;}public function&GetView(){return$this->view;}public function SetView(\MvcCore\View&$view){$this->view=$view;return$this;}public function GetLayout(){return$this->layout;}public function SetLayout($layout=''){$this->layout=$layout;return$this;}public function DisableView(){$this->viewEnabled=FALSE;}public function AssetAction(){$ext='';$path=$this->GetParam('path');$path='/'.ltrim(str_replace('..','',$path),'/');if(strpos($path,self::$staticPath)!==0&&strpos($path,self::$tmpPath)!==0){throw new\Exception("[".__CLASS__."] File path: '$path' is not allowed.",500);}$path=$this->request->AppRoot.$path;if(!\Packager_Php_Wrapper::FileExists($path)){throw new\Exception("[".__CLASS__."] File not found: '$path'.",404);}$lastDotPos=strrpos($path,'.');if($lastDotPos!==FALSE){$ext=substr($path,$lastDotPos+1);}if(isset(self::$_assetsMimeTypes[$ext])){header('Content-Type: '.self::$_assetsMimeTypes[$ext]);}header_remove('X-Powered-By');header('Vary: Accept-Encoding');$assetMTime=@\Packager_Php_Wrapper::Filemtime($path);if($assetMTime)header('Last-Modified: '.gmdate('D, d M Y H:i:s T',$assetMTime));\Packager_Php_Wrapper::Readfile($path);exit;}public function Render($controllerName='',$actionName=''){if($this->viewEnabled){if(!$controllerName)$controllerName=$this->request->params['controller'];if(!$actionName)$actionName=$this->request->params['action'];$controllerPath=str_replace(['_','\\'],'/',$controllerName);$viewScriptPath=implode('/',[$controllerPath,$actionName]);$actionResult=$this->view->RenderScript($viewScriptPath);$viewClass=\MvcCore::GetInstance()->GetViewClass();/** @var $layout \MvcCore\View */$layout=new$viewClass($this);$layout->SetUp($this->view);$outputResult=$layout->RenderLayoutAndContent($this->layout,$actionResult);unset($layout,$this->view);$this->HtmlResponse($outputResult);$this->DisableView();}}public function HtmlResponse($output=""){$contentTypeHeaderValue=strpos(\MvcCore\View::$Doctype,\MvcCore\View::DOCTYPE_XHTML)!==FALSE?'application/xhtml+xml':'text/html';$this->response->SetHeader('Content-Type',$contentTypeHeaderValue.'; charset=utf-8')->SetBody($output);}public function JsonResponse($data=[]){$output=\MvcCore\Tool::EncodeJson($data);$this->response->SetHeader('Content-Type','text/javascript; charset=utf-8')->SetHeader('Content-Length',strlen($output))->SetBody($output);}public function Url($controllerActionOrRouteName='Index:Index',$params=[]){return\MvcCore\Router::GetInstance()->Url($controllerActionOrRouteName,$params);}public function AssetUrl($path=''){return\MvcCore::GetInstance()->Url('Controller:Asset',['path'=>$path]);}public function RenderError($exceptionMessage=''){if(\MvcCore::GetInstance()->IsErrorDispatched())return;throw new\ErrorException($exceptionMessage?$exceptionMessage:"Server error: \n'".$this->request->FullUrl."'",500);}public function RenderNotFound(){if(\MvcCore::GetInstance()->IsNotFoundDispatched())return;throw new\ErrorException("Page not found: \n'".$this->request->FullUrl."'",404);}public function Terminate(){\MvcCore::GetInstance()->Terminate();}public static function Redirect($location='',$code=\MvcCore\Response::SEE_OTHER){\MvcCore::GetInstance()->GetResponse()->SetCode($code)->SetHeader('Location',$location);\MvcCore::GetInstance()->Terminate();}}}
namespace App\Controllers{class Base extends\MvcCore\Controller{public function Init(){parent::Init();}public function PreDispatch(){parent::PreDispatch();}}}
namespace App\Controllers{class Index extends Base{public function IndexAction(){$this->view->Title='Console Application Demo';$this->view->ImportKey='R';$this->view->QuitKey='Q';register_shutdown_function([__CLASS__,'HandleInput']);}public static function HandleInput(){$handle=fopen('php://stdin','r');$line=trim(fgets($handle));if($line=='R'){$this->Url('Import:Index',["testparam"=>"test value"]);}else if($line=='Q'){exit;}else{echo "TODO: dispatch action Import:Index\n";}fclose($handle);}public function NotFoundAction(){$this->view->Title="Error 404 - requested page not found.";$this->view->Message=$this->request->Params['message'];}}}
namespace App\Controllers{use App\Models;class Import extends Base{public function Init(){parent::Init();}public function PreDispatch(){parent::PreDispatch();}public function IndexAction(){die("import:index");}}}
namespace{
$app=\MvcCore::GetInstance();\App\Bootstrap::Init();$app->Run();
}